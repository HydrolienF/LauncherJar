name: LauncherJar
author: "HydrolienF"
description: 'Create a launcher for any jar app.'
branding:
  icon: 'play'
  color: 'orange'


inputs:
  GITHUB_TOKEN:
    description: 'dollar{{ github.token }} from your action so that this action can add artifacts'
    required: true
  release-url:
    description: 'dollar{{ steps.create_release.outputs.upload_url }} from your action so that this action can add artifacts'
    required: true # TODO create the release and use the url internally
  app-version:
    description: 'Version of the app & of the launcher'
    required: true
  uuid:
    description: 'Universally unique identifier for your app on Windows & Mac'
    required: false
    default: '' # TODO set UUID from Java `UUID.fromString(user-name/project-name)` if it's empty
  launcher-extension:
    description: 'The launcher extention: jar, exe, msi, deb, rpm, dmg, or pkg'
    required: false
    default: jar
  deb-maintainer-email:
    description: 'Email of the deb maintainer on Linux'
    required: false
    default: '...@gmail.com'
  gui:
    description: 'Does download show in GUI insted of CLI'
    required: false
    default: true
  runTimeImage:
    description: 'If define to "--runtime-image jlink/", it include only usefull module.'
    required: false
    default: '--runtime-image jlink/'
    # default : ''
  JRE_VERSION: 
    description: 'JRE version to use'
    required: false
    default: '21.0.1'
  LAUNCH_AFTER_INSTALL:
    description: 'If true launch app after install'
    required: false
    default: true
  JAVA_VERSION:
    description: 'Java version to use'
    required: false
    default: '21'
  JAVA_DISTRIBUTION:
    description: 'Java distribution to use'
    required: false
    default: 'temurin'

runs:
  using: "composite"
  steps:

  - uses: actions/setup-java@v3
    with:
      distribution: ${{ inputs.JAVA_DISTRIBUTION }}
      java-version: ${{ inputs.JAVA_VERSION }}

  - name: Set project-name & user-name
    id: data
    shell: pwsh
    run: |
      $projectName = "${{ github.repository }}"
      $projectName = $projectName.Substring($projectName.LastIndexOf('/')+1)
      echo "project-name=$projectName" >> $env:GITHUB_OUTPUT
      echo $projectName
      $userName = "${{ github.repository_owner }}"
      echo "user-name=$userName" >> $env:GITHUB_OUTPUT
      echo $userName

  - name: Create missing config file README, LICENSE, jvm.config, icon.png
    shell: pwsh
    if: inputs.launcher-extension=='jar'
    run: |
      if (!(Test-Path "README*")) {
        New-Item README.md
      }
      if (!(Test-Path "LICENSE*")) {
        New-Item LICENSE.md
      }
      if (!(Test-Path "jvm.config")) {
        "-XX:+UseZGC -XX:MinHeapSize=512m -XX:SoftMaxHeapSize=2G -XX:MaxRAMPercentage=90" | Out-File -FilePath "jvm.config"
      }
      if (!(Test-Path "icon.png")) {
        cp ${{ github.action_path }}/icon.png .
      }

  - name: Create icon from png version
    shell: pwsh
    if: inputs.launcher-extension=='jar'
    run: |
      if (!(Test-Path "icon.ico") || !(Test-Path "icon.icns")) {
        sudo apt install libfuse2
        wget https://imagemagick.org/archive/binaries/magick
        chmod 777 magick
        if (!(Test-Path "icon.ico")) {
          ./magick -background transparent "icon.png" "icon.ico"
        }
        if (!(Test-Path "icon.icns")) {
          ./magick "icon.png" "icon.icns"
        }
      }

  - name: create launcher as .jar
    shell: bash
    if: inputs.launcher-extension=='jar'
    run: |
      echo ${{ inputs.app-version }} > version.md
      echo ls -------------------------------------
      ls
      echo ----------------------------------------
      echo ls ${{ github.action_path }} -------------------------------------
      ls ${{ github.action_path }}
      echo ----------------------------------------

      cp -r ${{ github.action_path }} LauncherJar/
      cd LauncherJar/

      echo '''
      {
          "userName": "${{ steps.data.outputs.user-name }}",
          "projectName": "${{ steps.data.outputs.project-name }}",
          "gui": ${{ inputs.gui }},
      }
      ''' > settings.json
      mvn -ntp versions:set -DnewVersion="${{ inputs.app-version }}"
      mvn -ntp package
      mv target/LauncherJar*.jar ${{ steps.data.outputs.project-name }}Launcher.jar
      echo "choose name"
      nom=${{ steps.data.outputs.project-name }}${{ inputs.app-version }}
      if [[ -e out/ ]]; then
        echo "clear out"
        rm out/ -fr
      fi

      mkdir -p out/$nom
      echo ls . -----------------------------------
      ls .
      echo ls out/$nom -----------------------------------
      ls 
      echo ----------------------------------------
      echo "cp .jar, README, LICENSE, version & jvm.config"
      mv ${{ steps.data.outputs.project-name }}Launcher.jar out/$nom/.
      cp ../README* out/$nom/.
      cp ../LICENSE* out/$nom/LICENSE.md
      # cp ../version.md out/$nom/.
      cp ../jvm.config out/$nom/.
      cp ../icon* out/$nom/.
      echo ${{ inputs.JRE_VERSION }} > out/$nom/JREVersion.md

      echo "zip part"
      cd out/
      zip -qr ${{ steps.data.outputs.project-name }}Launcher.zip $nom
      echo "delete directory"
      rm -fr $nom
      cd ..

      echo "-----------------------"
      ls -l out/
      echo "-----------------------"
      ls ..
      echo "-----------------------"
      cd ..
      mv LauncherJar/out/${{ steps.data.outputs.project-name }}Launcher.zip ${{ steps.data.outputs.project-name }}Launcher.zip


  - name: download jlink/
    if: contains(fromJSON('["exe", "msi"]'), inputs.launcher-extension) && inputs.runTimeImage!=''
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ inputs.JRE_VERSION }}/jlink.zip D:/a/${{ steps.data.outputs.project-name }}/${{ steps.data.outputs.project-name }}/jlink/ jWindows/'
  - name: download jlink/
    if: contains(fromJSON('["deb", "rpm"]'), inputs.launcher-extension)  && inputs.runTimeImage!=''
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ inputs.JRE_VERSION }}/jlink.zip ~/work/${{ steps.data.outputs.project-name }}/${{ steps.data.outputs.project-name }}//jlink/ jLinux/'
  - name: download jlink/
    if: contains(fromJSON('["dmg", "pkg"]'), inputs.launcher-extension) && inputs.runTimeImage!=''
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ inputs.JRE_VERSION }}/jlink.zip ~/work/${{ steps.data.outputs.project-name }}/${{ steps.data.outputs.project-name }}//jlink/ jMac/'

  - name: download launcher as .zip unziped
    if: contains(fromJSON('["exe", "msi"]'), inputs.launcher-extension)
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/${{ steps.data.outputs.user-name }}/${{ steps.data.outputs.project-name }}/releases/download/${{ inputs.app-version }}/${{ steps.data.outputs.project-name }}Launcher.zip D:/a/${{ steps.data.outputs.project-name }}/${{ steps.data.outputs.project-name }}/in/ ${{ steps.data.outputs.project-name }}${{ inputs.app-version }}/'
  - name: download launcher as .zip unziped
    if: contains(fromJSON('["deb", "rpm", "dmg", "pkg"]'), inputs.launcher-extension)
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/${{ steps.data.outputs.user-name }}/${{ steps.data.outputs.project-name }}/releases/download/${{ inputs.app-version }}/${{ steps.data.outputs.project-name }}Launcher.zip ~/work/${{ steps.data.outputs.project-name }}/${{ steps.data.outputs.project-name }}/in/ ${{ steps.data.outputs.project-name }}${{ inputs.app-version }}/'


  - name: Move out some data from in/ & ls before create installer
    shell: pwsh
    if: inputs.launcher-extension!='jar'
    run: |
      if (!(Test-Path "jvm.config")) {
        mv in/jvm.config .
      }
      if (!(Test-Path "icon.png")) {
        mv in/icon.png .
      }
      if (!(Test-Path "icon.ico")) {
        mv in/icon.ico .
      }
      if (!(Test-Path "icon.icns")) {
        mv in/icon.icns .
      }
      if (!(Test-Path "LICENSE.md")) {
        cp in/LICENSE.md .
      }
      echo "======================================================"
      echo "ls"
      ls
      echo "======================================================"
      echo "ls -r in/"
      Get-ChildItem -Recurse in/
      echo "======================================================"
      # echo "ls -r jlink/"
      # Get-ChildItem -Recurse jlink/
      # echo "======================================================"

  - name: winRessources/
    shell: pwsh
    if: contains(fromJSON('["exe", "msi"]'), inputs.launcher-extension)
    env:
      OS: 'Windows'
    run: mkdir winRessources


  - name: launch after install
    if: contains(fromJSON('["exe", "msi"]'), inputs.launcher-extension) && inputs.LAUNCH_AFTER_INSTALL
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'download https://gist.githubusercontent.com/HydrolienF/97a6c94a0016adab590b55180b437712/raw/main.wxs D:/a/${{ steps.data.outputs.project-name }}/${{ steps.data.outputs.project-name }}/winRessources/main.wxs'


  - name: create ${{ inputs.launcher-extension }} installer
    shell: pwsh
    if: contains(fromJSON('["exe", "msi"]'), inputs.launcher-extension)
    env:
      OS: 'Windows'
    run: |
      # 1a line is the same for every OS, 2a is personalized by OS.
      jpackage --java-options "$(cat jvm.config)" --input in -d out --name ${{ steps.data.outputs.project-name }} --main-jar ${{ steps.data.outputs.project-name }}Launcher.jar --main-class fr.formiko.launcherjar.Main --app-version ${{ inputs.app-version }} --description "Launcher of ${{ steps.data.outputs.project-name }} v${{ inputs.app-version }}" --license-file LICENSE.md --vendor ${{ steps.data.outputs.user-name }} ${{ inputs.runTimeImage }} -t ${{ inputs.launcher-extension }} `
      --icon icon.ico --win-shortcut --win-menu --win-menu-group "${{ steps.data.outputs.project-name }}" --win-upgrade-uuid "${{ inputs.uuid }}" --resource-dir winRessources

  - name: create ${{ inputs.launcher-extension }} installer
    shell: pwsh
    if: contains(fromJSON('["deb", "rpm"]'), inputs.launcher-extension)
    env:
      OS: 'Linux'
    run: |
      $packageName = echo $("${{ steps.data.outputs.project-name }}".ToLower())
      mkdir debRessources/
      cp icon.png debRessources/
      echo "$packageName" > debRessources/launcher.desktop
      echo "echo 'chmod'
      chmod -R 777 /opt/$packageName/
      echo 'Create shortcut. You can launch ${{ steps.data.outputs.project-name }} in cmd line with:'
      echo $packageName
      sudo rm -f /bin/$packageName
      sudo ln -s /opt/$packageName/bin/${{ steps.data.outputs.project-name }} /bin/$packageName" > debRessources/postinst
      echo "echo 'remove shortcut'
      sudo rm -f /bin/$packageName
      echo 'remove temp data'
      sudo rm -fr ~/.$packageName" > debRessources/postrm
      echo "======================================================"
      echo "ls debRessources/"
      ls debRessources/
      echo "======================================================"
      cat debRessources/launcher.desktop
      echo "======================================================"
      cat debRessources/postinst
      echo "======================================================"
      cat debRessources/postrm
      echo "======================================================"
      jpackage --java-options "$(cat jvm.config)" --input in -d out --name ${{ steps.data.outputs.project-name }} --main-jar ${{ steps.data.outputs.project-name }}Launcher.jar --main-class fr.formiko.launcherjar.Main --app-version ${{ inputs.app-version }} --description "Launcher of ${{ steps.data.outputs.project-name }} v${{ inputs.app-version }}" --license-file LICENSE.md  --vendor ${{ steps.data.outputs.user-name }} ${{ inputs.runTimeImage }} -t ${{ inputs.launcher-extension }} `
      --icon icon.png --linux-package-name $packageName --linux-shortcut --linux-deb-maintainer ${{ inputs.deb-maintainer-email }} --linux-menu-group "Game;StrategyGame" --linux-app-category games --resource-dir debRessources/

  - name: create ${{ inputs.launcher-extension }} installer
    shell: pwsh
    if: contains(fromJSON('["dmg", "pkg"]'), inputs.launcher-extension)
    env:
      OS: 'Mac'
    run: |
      echo "Create ${{ inputs.launcher-extension }} installer"
      # Force 1a version number to be 1 for mac (Mac don't accept 0 as 1a version number).
      $appVersion = "${{ inputs.app-version }}"
      if($appVersion[0] -eq '0'){
        $appVersion = '1'+$appVersion.Substring(1, $appVersion.length-1)
      }
      jpackage --java-options "$(cat jvm.config)" --input in -d out --name ${{ steps.data.outputs.project-name }} --main-jar ${{ steps.data.outputs.project-name }}Launcher.jar --main-class fr.formiko.launcherjar.Main --app-version $appVersion --description "Launcher of ${{ steps.data.outputs.project-name }} v${{ inputs.app-version }}" --license-file LICENSE.md  --vendor ${{ steps.data.outputs.user-name }} ${{ inputs.runTimeImage }} -t ${{ inputs.launcher-extension }} `
      --icon icon.icns --mac-package-name $("${{ steps.data.outputs.project-name }}".ToLower()) --mac-package-identifier "${{ inputs.uuid }}"

  - name: mv & ls after create installer
    shell: pwsh
    if: inputs.launcher-extension!='jar'
    run: |
      echo "======================================================"
      echo "ls out"
      ls out
      echo "======================================================"
      mv ./out/${{ steps.data.outputs.project-name }}*.${{ inputs.launcher-extension }} ${{ steps.data.outputs.project-name }}.${{ inputs.launcher-extension }}
      echo "======================================================"
      echo "ls"
      ls
      echo "======================================================"



  - name: upload artifact jar
    if: inputs.launcher-extension=='jar'
    uses: actions/upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release-url }}
      asset_path: ${{ steps.data.outputs.project-name }}Launcher.zip
      asset_name: ${{ steps.data.outputs.project-name }}Launcher.zip
      asset_content_type: application/zip

  - name: upload artifact else
    if: inputs.launcher-extension!='jar'
    uses: actions/upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release-url }}
      asset_path: ${{ steps.data.outputs.project-name }}.${{ inputs.launcher-extension }}
      asset_name: ${{ steps.data.outputs.project-name }}.${{ inputs.launcher-extension }}
      asset_content_type: application/${{ inputs.launcher-extension }}
