name: LauncherJar
author: "HydrolienF"
description: 'Create a launcher for any jar app.'
branding:
  icon: 'play'
  color: 'orange'

on:
  pull_request:
    branches: [master]
    types: [closed]


inputs:
  project-name:  # id of input
    description: 'Name of your projet'
    required: true
  user-name:
    description: 'Name of the github user account'
    required: true
  launcher-jar-version:
    description: 'Version of launcher jar'
    required: true
  GITHUB_TOKEN:
    description: 'dollar{{ github.token }} from your action so that this action can add artifacts'
    required: true
  release-url:
    description: 'dollar{{ steps.create_release.outputs.upload_url }} from your action so that this action can add artifacts'
    required: true
  app-version:
    description: 'version of the app & of the launcher'
    required: true
  launcher-extension:
    description: 'the launcher extention: jar, msi, deb or dmg'
    required: false
    default: jar

env:
  JAVA_VERSION: '18'
  JAVA_DISTRIBUTION: 'temurin'
  JRE_VERSION: '18.0.7'


runs:
  using: "composite"
  steps:

  - uses: actions/setup-java@v3
    with:
      distribution: ${{ env.JAVA_DISTRIBUTION }}
      java-version: ${{ env.JAVA_VERSION }}

  - name: define main path
    shell: pwsh
    id: defineMainPath
    run: |
      $le = "${{ inputs.launcher-extension }}"
      if($le -eq "msi"){ $mainPath="D:/a/${{ inputs.project-name }}/${{ inputs.project-name }}/" }
      else { $mainPath="~/work/${{ inputs.project-name }}/${{ inputs.project-name }}/" }
      echo "mainPath=$mainPath" >> $GITHUB_OUTPUT
      echo $mainPath


  - name: download LauncherJar files
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'download https://github.com/HydrolienF/LauncherJar/archive/refs/tags/${{ inputs.launcher-jar-version }}.zip temp.zip'
  
  # args is proably choose before steps start, so we can't use result of it.
  - name: unzip LauncherJar files
    if: inputs.launcher-extension=='msi'
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'unzip temp.zip D:/a/${{ inputs.project-name }}/${{ inputs.project-name }}/'

  - name: unzip LauncherJar files
    if: inputs.launcher-extension!='msi'
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'unzip temp.zip $HOME/work/${{ inputs.project-name }}/${{ inputs.project-name }}/'


  - name: create launcher as .jar
    shell: bash
    if: inputs.launcher-extension=='jar'
    run: |
      echo ${{ inputs.app-version }} > version.md
      echo ls -------------------------------------
      ls
      echo ----------------------------------------
      cd LauncherJar-${{ inputs.launcher-jar-version }}/
      mvn -ntp versions:set -DnewVersion="${{ inputs.launcher-jar-version }}"
      mvn -ntp package
      mv target/LauncherJar-${{ inputs.launcher-jar-version }}.jar ${{ inputs.project-name }}.jar
      echo "choose name"
      nom=${{ inputs.project-name }}${{ inputs.launcher-jar-version }}
      if [[ -e out/ ]]; then
        echo "clear out"
        rm out/ -fr
      fi
      mkdir out/

      mkdir out/$nom
      echo ls . -----------------------------------
      ls .
      echo ----------------------------------------
      echo "cp .jar, README.md, LICENSE.md & version.md"
      mv ${{ inputs.project-name }}.jar out/$nom/.
      cp ../README* out/$nom/.
      cp ../LICENSE* out/$nom/.
      # cp ../version.md out/$nom/.
      cp ../.mvn/jvm.config out/$nom/.
      echo ${{ env.JRE_VERSION }} > out/$nom/JREVersion.md

      echo "zip part"
      cd out/
      zip -qr ${{ inputs.project-name }}Launcher.zip $nom
      echo "delete directory"
      rm -fr $nom
      cd ..

      echo "-----------------------"
      ls -l out/
      echo "-----------------------"
      ls ..
      echo "-----------------------"
      cd ..
      mv LauncherJar-${{ inputs.launcher-jar-version }}/out/${{ inputs.project-name }}Launcher.zip ${{ inputs.project-name }}Launcher.zip


  - name: download jlink/
    if: inputs.launcher-extension!='jar'
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip D:/a/${{ inputs.project-name }}/${{ inputs.project-name }}/jlink/ j$os/'
    # run: |
    #   $le = "${{ inputs.launcher-extension }}"
    #   if($le -eq "msi"){ $os="Windows" }
    #   if($le -eq "deb"){ $os="Linux" }
    #   if($le -eq "dmg"){ $os="Mac" }
    #   cd LauncherJar-${{ inputs.launcher-jar-version }}/
    #   mvn -ntp compile exec:java -Dargs="-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip $pwd/../jlink/ j$os/"
    #   echo "-----------------------"
    #   ls
    #   echo "-----------------------"
    #   ls ../jlink/
    #   echo "-----------------------"

  - name: download launcher as .zip unziped
    if: inputs.launcher-extension!='jar'
    uses: HydrolienF/usual@0.3.38
    with:
      args: 'downloadAndUnzip https://github.com/${{ inputs.user-name }}/${{ inputs.project-name }}/releases/download/${{ inputs.app-version }}/${{ inputs.project-name }}Launcher.zip D:/a/${{ inputs.project-name }}/${{ inputs.project-name }}/in/ ${{ inputs.project-name }}${{ inputs.app-version }}/'
    # run: |
    #   cd LauncherJar-${{ inputs.launcher-jar-version }}/
    #   mvn -ntp versions:set -DnewVersion="${{ inputs.app-version }}"
    #   mvn -ntp exec:java -Dargs='downloadAndUnzip ${{ inputs.release-url }}${{ inputs.project-name }}Launcher.zip $pwd/../in/ ${{ inputs.project-name }}${{ inputs.app-version }}/'
    #   echo "-----------------------"
    #   ls
    #   echo "-----------------------"
    #   ls ../in/


  - name: create msi installer
    shell: pwsh
    if: inputs.launcher-extension=='msi'
    env:
      OS: 'Windows'
    run: |
      echo "======================================================"
      echo "ls"
      ls
      echo "======================================================"
      echo "ls -r in/"
      Get-ChildItem -Recurse in/
      echo "======================================================"
      jpackage --java-options "$(cat .mvn/jvm.config)" --input in -d out --name ${{ inputs.project-name }} --main-jar ${{ inputs.project-name }}.jar --main-class fr.formiko.launcherjar.Main --app-version ${{ inputs.app-version }} --description "Launcher of ${{ inputs.project-name }}" --license-file LICENSE.md  --vendor ${{ inputs.user-name }} --runtime-image jlink/ -t ${{ inputs.launcher-extension }} `
      --icon tools/icon.ico --win-shortcut --win-menu --win-menu-group "${{ inputs.project-name }}" --win-upgrade-uuid "1468751e-078f-4fab-80e4-fa15e9b364b4"
      # rm -r in
      cscript tools/addLaunchToMsi.js ${{ inputs.app-version }}
      echo "======================================================"
      echo "ls"
      ls
      echo "======================================================"
      echo "ls out/"
      ls out/
      echo "======================================================"
      mv ./out/${{ inputs.project-name }}-${{ inputs.app-version }}.msi ${{ inputs.project-name }}.msi

  # TODO create mac & linux artifact

  - name: upload artifact jar
    if: inputs.launcher-extension=='jar'
    uses: actions/upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release-url }}
      asset_path: ${{ inputs.project-name }}Launcher.zip
      asset_name: ${{ inputs.project-name }}Launcher.zip
      asset_content_type: application/zip

  - name: upload artifact else
    if: inputs.launcher-extension!='jar'
    uses: actions/upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release-url }}
      asset_path: ${{ inputs.project-name }}Launcher.${{ inputs.launcher-extension }}
      asset_name: ${{ inputs.project-name }}Launcher.${{ inputs.launcher-extension }}
      asset_content_type: application/${{ inputs.launcher-extension }}


  # TODO for each OS:
  # download jlink/
  # download launcherJar.zip
  # use jpackage
  # upload artifact





  # WindowsArtifact:
  #   env:
  #     OS: 'Windows'
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: jlink
  #     shell: pwsh
  #     run: |
  #       mvn -ntp compile exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
  #       ls jlink/
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull

  #   - name: version
  #     id: version
  #     shell: pwsh
  #     run: |
  #       $version = cat version.md
  #       echo "-------------"
  #       echo $version
  #       echo "-------------"
  #       echo "::set-output name=version::$version"

  #   - name: build
  #     shell: pwsh
  #     run: |
  #       # Start of commun par with all OS
  #       mvn -ntp versions:set -DnewVersion="$(cat version.md)"
  #       mvn -ntp exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/${{ env.USER_NAME }}/${{ inputs.project-name }}Launcher/releases/download/${{ inputs.app-version }}/${{ inputs.project-name }}${{ inputs.app-version }}.zip in/ ${{ inputs.project-name }}${{ inputs.app-version }}/'
  #       ls in/
  #       # end of commun par with all OS
  #       ${{ env.JPACKAGE }} --icon tools/icon.ico --win-shortcut --win-menu --win-menu-group "${{ inputs.project-name }}" -t msi --win-upgrade-uuid "1468751e-078f-4fab-80e4-fa15e9b364b3"
  #       rm -r in
  #       cscript tools/addLaunchToMsi.js ${{ inputs.app-version }}
  #       echo "======================================================"
  #       echo "ls"
  #       ls
  #       echo "======================================================"
  #       echo "ls out/"
  #       ls out/
  #       echo "======================================================"
  #       mv ./out/${{ inputs.project-name }}-${{ inputs.app-version }}.msi ${{ env.ARTIFACT_NAME }}.msi
  #   - name: upload .msi artifact
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{needs.releaseJob.outputs.output1}}
  #       asset_path: ${{ env.ARTIFACT_NAME }}.msi
  #       asset_name: ${{ env.ARTIFACT_NAME }}.msi
  #       asset_content_type: application/msi

  # LinuxArtifact:
  #   env:
  #     OS: 'Linux'
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: jlink
  #     run: |
  #       mvn -ntp compile exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
  #       ls jlink/
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull
  #   - name: version
  #     id: version
  #     run: |
  #       version=$(cat version.md)
  #       echo "-------------"
  #       echo $version
  #       echo "-------------"
  #       echo "::set-output name=version::$version"
  #   - name: build
  #     run: |
  #       # Start of commun par with all OS
  #       mvn -ntp versions:set -DnewVersion="$(cat version.md)"
  #       mvn -ntp exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/${{ env.USER_NAME }}/${{ inputs.project-name }}Launcher/releases/download/${{ inputs.app-version }}/${{ inputs.project-name }}${{ inputs.app-version }}.zip in/ ${{ inputs.project-name }}${{ inputs.app-version }}/'
  #       ls in/
  #       # end of commun par with all OS
  #       # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
  #       # TOFIX icon is not used on tab screen or in menu screen
  #       ${{ env.JPACKAGE }} --icon tools/icon.png -t deb --linux-package-name ${{ inputs.project-name }} --linux-shortcut --linux-deb-maintainer hydrolien.f@gmail.com --linux-menu-group "Game;StrategyGame" --linux-app-category games --resource-dir tools/debRessources/
  #       ls out/
  #       mv out/${{ inputs.project-name }}_${{ inputs.app-version }}_amd64.deb ${{ env.ARTIFACT_NAME }}.deb
  #   - name: upload .deb artifact
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{needs.releaseJob.outputs.output1}}
  #       asset_path: ${{ env.ARTIFACT_NAME }}.deb
  #       asset_name: ${{ env.ARTIFACT_NAME }}.deb
  #       asset_content_type: application/deb

  # MacArtifact:
  #   env:
  #     OS: 'Mac'
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: jlink
  #     run: |
  #       mvn -ntp compile exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
  #       ls jlink/
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull
  #   - name: version
  #     id: version
  #     run: |
  #       version=$(cat version.md)
  #       echo "-------------"
  #       echo $version
  #       echo "-------------"
  #       echo "::set-output name=version::$version"
  #   - name: build
  #     run: |
  #       # Start of commun par with all OS
  #       mvn -ntp versions:set -DnewVersion="$(cat version.md)"
  #       mvn -ntp exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/${{ env.USER_NAME }}/${{ inputs.project-name }}Launcher/releases/download/${{ inputs.app-version }}/${{ inputs.project-name }}${{ inputs.app-version }}.zip in/ ${{ inputs.project-name }}${{ inputs.app-version }}/'
  #       ls in/
  #       # end of commun par with all OS
  #       # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
  #       # TOFIX icon is not used on tab screen or in menu screen
  #       ${{ env.JPACKAGE }} --icon tools/icon.icns -t dmg --mac-package-name ${{ inputs.project-name }} --mac-package-identifier "1468751e-078f-4fab-80e4-fa15e9b364b3"
  #       ls out/
  #       mv out/${{ inputs.project-name }}-${{ inputs.app-version }}.dmg ${{ env.ARTIFACT_NAME }}.dmg
  #   - name: upload .dmg artifact
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{needs.releaseJob.outputs.output1}}
  #       asset_path: ${{ env.ARTIFACT_NAME }}.dmg
  #       asset_name: ${{ env.ARTIFACT_NAME }}.dmg
  #       asset_content_type: application/dmg
