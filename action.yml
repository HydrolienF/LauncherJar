name: LauncherJar
author: "HydrolienF"
description: 'Create a launcher for any jar app.'
branding:
  icon: 'play'
  color: 'orange'

on:
  pull_request:
    branches: [master]
    types: [closed]


inputs:
  project-name:  # id of input
    description: 'Name of your projet'
    required: true
    # default: 'App'
  launcher-jar-version:
    description: 'Version of launcher jar'
    required: true
  GITHUB_TOKEN:
    description: '${{ github.token }} from your action so that this action can add artifacts'
    required: true
  release-url:
    description: '${{ steps.create_release.outputs.upload_url }} from your action so that this action can add artifacts'
    required: true

env:
  JAVA_VERSION: '18'
  JAVA_DISTRIBUTION: 'temurin'
  JRE_VERSION: '18.0.7'
  # USER_NAME: 'HydrolienF'
  # ARTIFACT_NAME: 'KokcineloLauncher'
  # JPACKAGE: 'jpackage --java-options "$(cat .mvn/jvm.config)" --input in -d out --name Kokcinelo --main-jar Kokcinelo.jar --main-class fr.formiko.launcherjar.Main --app-version $(cat version.md) --description "Launcher of Kokcinelo" --license-file LICENSE.md  --vendor Hydrolien --runtime-image jlink/'


runs:
  using: "composite"
  steps:

  - uses: actions/setup-java@v3
    with:
      distribution: ${{ env.JAVA_DISTRIBUTION }}
      java-version: ${{ env.JAVA_VERSION }}

  - name: download LauncherJar
    shell: bash
    run: |
      wget https://github.com/HydrolienF/LauncherJar/archive/refs/tags/${{ inputs.launcher-jar-version }}.zip
      unzip ${{ inputs.launcher-jar-version }}.zip
      ls LauncherJar-${{ inputs.launcher-jar-version }}/


  - name: Version-Tool
    uses: HydrolienF/Version-Tool@0.7.0
    id: version

  - name: update version.md
    shell: bash
    run: echo ${{ steps.version.outputs.version }} > version.md

  - name: create launcher jar
    shell: bash
    run: |
      cd LauncherJar-${{ inputs.launcher-jar-version }}/
      mvn -ntp versions:set -DnewVersion="$(cat version.md)"
      mvn -ntp package
      mv target/${{ inputs.project-name }}-$(cat version.md).jar ${{ inputs.project-name }}.jar
      echo "choose name"
      nom=${{ inputs.project-name }}$(cat version.md)
      if [[ -e out/ ]]; then
        echo "clear out"
        rm out/ -fr
      fi
      mkdir out/

      mkdir out/$nom
      echo "cp .jar, README.md, LICENSE.md & version.md"
      mv ${{ inputs.project-name }}.jar out/$nom/.
      cp ../README.md out/$nom/.
      cp ../LICENSE.md out/$nom/.
      # cp ../version.md out/$nom/.
      # cp ../.mvn/jvm.config out/$nom/.
      echo ${{ env.JRE_VERSION }} > out/$nom/JREVersion.md

      echo "zip part"
      cd out/
      zip -qr $nom.zip $nom
      echo "delete directory"
      rm -fr $nom
      cd ..

      echo "-----------------------"
      ls -l out/
      echo "-----------------------"


  - name: upload .jar artifact
    uses: actions/upload-release-asset@v1
    with:
      upload_url: ${{ inputs.release-url }}
      asset_path: ./out/${{ inputs.project-name }}${{ steps.version.outputs.version }}.zip
      asset_name: ${{ inputs.project-name }}${{ steps.version.outputs.version }}.zip
      asset_content_type: application/zip

    # - name: commit version
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git config pull.rebase true
    #     git add version.md
    #     git commit -m "Auto data version update"
    #     git restore .
    #     git fetch
    #     git pull
    #     git push

  # WindowsArtifact:
  #   env:
  #     OS: 'Windows'
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: jlink
  #     shell: pwsh
  #     run: |
  #       mvn -ntp compile exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
  #       ls jlink/
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull

  #   - name: version
  #     id: version
  #     shell: pwsh
  #     run: |
  #       $version = cat version.md
  #       echo "-------------"
  #       echo $version
  #       echo "-------------"
  #       echo "::set-output name=version::$version"

  #   - name: build
  #     shell: pwsh
  #     run: |
  #       # Start of commun par with all OS
  #       mvn -ntp versions:set -DnewVersion="$(cat version.md)"
  #       mvn -ntp exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/${{ env.USER_NAME }}/${{ inputs.project-name }}Launcher/releases/download/${{ steps.version.outputs.version }}/${{ inputs.project-name }}${{ steps.version.outputs.version }}.zip in/ ${{ inputs.project-name }}${{ steps.version.outputs.version }}/'
  #       ls in/
  #       # end of commun par with all OS
  #       ${{ env.JPACKAGE }} --icon tools/icon.ico --win-shortcut --win-menu --win-menu-group "${{ inputs.project-name }}" -t msi --win-upgrade-uuid "1468751e-078f-4fab-80e4-fa15e9b364b3"
  #       rm -r in
  #       cscript tools/addLaunchToMsi.js ${{ steps.version.outputs.version }}
  #       echo "======================================================"
  #       echo "ls"
  #       ls
  #       echo "======================================================"
  #       echo "ls out/"
  #       ls out/
  #       echo "======================================================"
  #       mv ./out/${{ inputs.project-name }}-${{ steps.version.outputs.version }}.msi ${{ env.ARTIFACT_NAME }}.msi
  #   - name: upload .msi artifact
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{needs.releaseJob.outputs.output1}}
  #       asset_path: ${{ env.ARTIFACT_NAME }}.msi
  #       asset_name: ${{ env.ARTIFACT_NAME }}.msi
  #       asset_content_type: application/msi

  # LinuxArtifact:
  #   env:
  #     OS: 'Linux'
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: jlink
  #     run: |
  #       mvn -ntp compile exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
  #       ls jlink/
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull
  #   - name: version
  #     id: version
  #     run: |
  #       version=$(cat version.md)
  #       echo "-------------"
  #       echo $version
  #       echo "-------------"
  #       echo "::set-output name=version::$version"
  #   - name: build
  #     run: |
  #       # Start of commun par with all OS
  #       mvn -ntp versions:set -DnewVersion="$(cat version.md)"
  #       mvn -ntp exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/${{ env.USER_NAME }}/${{ inputs.project-name }}Launcher/releases/download/${{ steps.version.outputs.version }}/${{ inputs.project-name }}${{ steps.version.outputs.version }}.zip in/ ${{ inputs.project-name }}${{ steps.version.outputs.version }}/'
  #       ls in/
  #       # end of commun par with all OS
  #       # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
  #       # TOFIX icon is not used on tab screen or in menu screen
  #       ${{ env.JPACKAGE }} --icon tools/icon.png -t deb --linux-package-name ${{ inputs.project-name }} --linux-shortcut --linux-deb-maintainer hydrolien.f@gmail.com --linux-menu-group "Game;StrategyGame" --linux-app-category games --resource-dir tools/debRessources/
  #       ls out/
  #       mv out/${{ inputs.project-name }}_${{ steps.version.outputs.version }}_amd64.deb ${{ env.ARTIFACT_NAME }}.deb
  #   - name: upload .deb artifact
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{needs.releaseJob.outputs.output1}}
  #       asset_path: ${{ env.ARTIFACT_NAME }}.deb
  #       asset_name: ${{ env.ARTIFACT_NAME }}.deb
  #       asset_content_type: application/deb

  # MacArtifact:
  #   env:
  #     OS: 'Mac'
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #     with:
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: jlink
  #     run: |
  #       mvn -ntp compile exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
  #       ls jlink/
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull
  #   - name: version
  #     id: version
  #     run: |
  #       version=$(cat version.md)
  #       echo "-------------"
  #       echo $version
  #       echo "-------------"
  #       echo "::set-output name=version::$version"
  #   - name: build
  #     run: |
  #       # Start of commun par with all OS
  #       mvn -ntp versions:set -DnewVersion="$(cat version.md)"
  #       mvn -ntp exec:java -Dargs='-logToFile=false downloadAndUnzip https://github.com/${{ env.USER_NAME }}/${{ inputs.project-name }}Launcher/releases/download/${{ steps.version.outputs.version }}/${{ inputs.project-name }}${{ steps.version.outputs.version }}.zip in/ ${{ inputs.project-name }}${{ steps.version.outputs.version }}/'
  #       ls in/
  #       # end of commun par with all OS
  #       # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
  #       # TOFIX icon is not used on tab screen or in menu screen
  #       ${{ env.JPACKAGE }} --icon tools/icon.icns -t dmg --mac-package-name ${{ inputs.project-name }} --mac-package-identifier "1468751e-078f-4fab-80e4-fa15e9b364b3"
  #       ls out/
  #       mv out/${{ inputs.project-name }}-${{ steps.version.outputs.version }}.dmg ${{ env.ARTIFACT_NAME }}.dmg
  #   - name: upload .dmg artifact
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: ${{needs.releaseJob.outputs.output1}}
  #       asset_path: ${{ env.ARTIFACT_NAME }}.dmg
  #       asset_name: ${{ env.ARTIFACT_NAME }}.dmg
  #       asset_content_type: application/dmg
